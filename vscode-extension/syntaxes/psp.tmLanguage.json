{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "PSP",
  "scopeName": "source.psp",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#builtin-functions"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.psp",
          "match": "#.*$"
        },
        {
          "name": "comment.block.psp",
          "begin": "/\\*",
          "end": "\\*/",
          "patterns": [
            {
              "name": "keyword.other.documentation.psp",
              "match": "@\\w+"
            }
          ]
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.psp",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.psp",
              "match": "\\\\."
            },
            {
              "name": "meta.embedded.line.psp",
              "begin": "\\$\\{",
              "end": "\\}",
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            }
          ]
        },
        {
          "name": "string.quoted.single.psp",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.psp",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.triple.psp",
          "begin": "\"\"\"",
          "end": "\"\"\"",
          "patterns": [
            {
              "name": "constant.character.escape.psp",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.raw.psp",
          "begin": "r\"",
          "end": "\""
        },
        {
          "name": "string.quoted.raw.single.psp",
          "begin": "r'",
          "end": "'"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.hex.psp",
          "match": "\\b0[xX][0-9a-fA-F]+\\b"
        },
        {
          "name": "constant.numeric.binary.psp",
          "match": "\\b0[bB][01]+\\b"
        },
        {
          "name": "constant.numeric.octal.psp",
          "match": "\\b0[oO][0-7]+\\b"
        },
        {
          "name": "constant.numeric.float.psp",
          "match": "\\b\\d+\\.\\d*([eE][+-]?\\d+)?\\b"
        },
        {
          "name": "constant.numeric.integer.psp",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.psp",
          "match": "\\b(if|else|elseif|unless|switch|case|default|for|foreach|while|do|break|continue|return|try|catch|finally|throw|async|await)\\b"
        },
        {
          "name": "keyword.operator.logical.psp",
          "match": "\\b(and|or|not|in|not in|is|is not)\\b"
        },
        {
          "name": "storage.type.psp",
          "match": "\\b(function|class|interface|mixin|abstract|static|private|public|protected|const|readonly|global|local|export|import|from|as)\\b"
        },
        {
          "name": "storage.modifier.psp",
          "match": "\\b(extends|implements|with|super|this|new|delete|typeof|instanceof)\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.psp",
          "begin": "\\b(function)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.function.psp"
            },
            "2": {
              "name": "entity.name.function.psp"
            }
          },
          "end": "\\{",
          "patterns": [
            {
              "include": "#function-parameters"
            }
          ]
        },
        {
          "name": "meta.function-call.psp",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()",
          "captures": {
            "1": {
              "name": "entity.name.function.psp"
            }
          }
        }
      ]
    },
    "function-parameters": {
      "patterns": [
        {
          "name": "variable.parameter.psp",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.psp",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.psp",
          "match": "\\+|\\-|\\*|/|%|\\*\\*|//|\\+\\+|\\-\\-"
        },
        {
          "name": "keyword.operator.comparison.psp",
          "match": "==|!=|>|<|>=|<=|=~|!~"
        },
        {
          "name": "keyword.operator.logical.psp",
          "match": "&&|\\|\\||!"
        },
        {
          "name": "keyword.operator.bitwise.psp",
          "match": "&|\\||\\^|~|<<|>>"
        },
        {
          "name": "keyword.operator.assignment.psp",
          "match": "=|\\+=|\\-=|\\*=|/=|%=|\\*\\*=|//=|&=|\\|=|\\^=|<<=|>>="
        },
        {
          "name": "keyword.operator.ternary.psp",
          "match": "\\?|:"
        },
        {
          "name": "keyword.operator.null-coalescing.psp",
          "match": "\\?\\?|\\?\\."
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.psp",
          "match": "\\b(true|false|null|undefined)\\b"
        },
        {
          "name": "constant.other.psp",
          "match": "\\b[A-Z][A-Z0-9_]*\\b"
        }
      ]
    },
    "builtin-functions": {
      "patterns": [
        {
          "name": "support.function.network.psp",
          "match": "\\b(connect|send|recv|scan_port|scan_range|ping|banner_grab)\\b"
        },
        {
          "name": "support.function.crypto.psp",
          "match": "\\b(md5|sha1|sha256|sha512|base64_encode|base64_decode|hash_password|encrypt|decrypt)\\b"
        },
        {
          "name": "support.function.exploit.psp",
          "match": "\\b(create_payload|buffer_overflow|shellcode|nop_sled|pattern_create|pattern_offset)\\b"
        },
        {
          "name": "support.function.system.psp",
          "match": "\\b(enum_processes|enum_services|registry_read|registry_write|get_system_info|run_command)\\b"
        },
        {
          "name": "support.function.file.psp",
          "match": "\\b(file_read|file_write|file_exists|dir_list|file_copy|file_move|file_delete)\\b"
        },
        {
          "name": "support.function.web.psp",
          "match": "\\b(http_request|parse_html|extract_links|web_crawl|sql_injection|xss_test)\\b"
        },
        {
          "name": "support.function.output.psp",
          "match": "\\b(print|printf|log|debug|error|warning|info)\\b"
        },
        {
          "name": "support.function.utility.psp",
          "match": "\\b(len|str|int|float|bool|type|isinstance|range|enumerate|zip|map|filter|reduce)\\b"
        }
      ]
    }
  }
}
