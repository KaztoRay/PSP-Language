#!/usr/bin/env psp
# -*- coding: utf-8 -*-

/**
 * PSP 언어 예제 인덱스 및 학습 가이드
 * 모든 예제 파일들의 개요와 학습 순서를 제공
 */

print("=== PSP (PowerShellPlus) 언어 예제 가이드 ===\n")

# ============================================================================
# 예제 파일 목록 및 설명
# ============================================================================

class ExampleGuide {
    private dict<string, dict<string, mixed>> examples
    
    constructor() {
        this.examples = {
            "hello_world.pspp": {
                "title": "Hello World - 기초 예제",
                "difficulty": "초급",
                "topics": ["기본 문법", "출력", "변수", "주석"],
                "description": "PSP 언어의 가장 기본적인 문법과 기능을 소개하는 예제입니다."
            },
            
            "comprehensive_features.pspp": {
                "title": "종합 기능 데모",
                "difficulty": "중급-고급",
                "topics": ["모든 언어 기능", "변수와 타입", "제어구조", "함수", "클래스", "예외처리", "모듈", "비동기", "메타프로그래밍", "매크로"],
                "description": "PSP 언어의 모든 핵심 기능을 포괄적으로 다루는 완전한 참조 예제입니다."
            },
            
            "security_toolkit.pspp": {
                "title": "보안 도구 모음",
                "difficulty": "고급",
                "topics": ["네트워크 스캔", "취약점 분석", "암호화", "해시 크래킹", "무선 보안", "포렌식", "악성코드 분석"],
                "description": "화이트햇 해킹과 보안 테스트에 특화된 고급 보안 도구들의 구현 예제입니다."
            },
            
            "practical_projects.pspp": {
                "title": "실무 프로젝트 예제",
                "difficulty": "고급",
                "topics": ["취약점 스캐너", "로그 분석", "침입 탐지", "패킷 분석", "실제 활용"],
                "description": "실제 보안 업무에서 사용할 수 있는 완성도 높은 프로젝트 예제들입니다."
            },
            
            "network_scan.pspp": {
                "title": "네트워크 스캔",
                "difficulty": "중급",
                "topics": ["포트 스캔", "서비스 탐지", "네트워크 정찰"],
                "description": "네트워크 스캔과 서비스 탐지를 위한 도구 구현 예제입니다."
            },
            
            "vulnerability_test.pspp": {
                "title": "취약점 테스트",
                "difficulty": "중급-고급",
                "topics": ["SQL 인젝션", "XSS", "취약점 스캔", "웹 보안"],
                "description": "일반적인 웹 애플리케이션 취약점을 테스트하는 도구 예제입니다."
            },
            
            "system_recon.pspp": {
                "title": "시스템 정찰",
                "difficulty": "중급",
                "topics": ["시스템 정보", "프로세스 모니터링", "파일 시스템", "환경 변수"],
                "description": "대상 시스템의 정보를 수집하는 정찰 도구 예제입니다."
            },
            
            "web_application_test.pspp": {
                "title": "웹 애플리케이션 테스트",
                "difficulty": "중급-고급", 
                "topics": ["HTTP 요청", "웹 크롤링", "폼 분석", "쿠키 조작"],
                "description": "웹 애플리케이션의 보안을 테스트하는 종합적인 도구 예제입니다."
            },
            
            "advanced_features.pspp": {
                "title": "고급 기능 예제",
                "difficulty": "고급",
                "topics": ["고급 문법", "성능 최적화", "메모리 관리", "고급 데이터 구조"],
                "description": "PSP 언어의 고급 기능과 최적화 기법을 다루는 예제입니다."
            }
        }
    }
    
    public void show_overview() {
        printf("PSP 언어 예제 파일 개요\n")
        printf("=".repeat(50) + "\n\n")
        
        # 난이도별 분류
        dict<string, list<string>> by_difficulty = {
            "초급": new list<string>(),
            "중급": new list<string>(),
            "중급-고급": new list<string>(),
            "고급": new list<string>()
        }
        
        foreach (filename, info in this.examples) {
            string difficulty = info["difficulty"]
            by_difficulty[difficulty].push(filename)
        }
        
        foreach (level, files in by_difficulty) {
            if (files.length > 0) {
                printf("📚 %s 예제:\n", level)
                foreach (file in files) {
                    dict<string, mixed> info = this.examples[file]
                    printf("  • %s\n", info["title"])
                    printf("    파일: %s\n", file)
                    printf("    주제: %s\n", array_to_string(info["topics"]))
                    printf("    설명: %s\n\n", info["description"])
                }
            }
        }
    }
    
    public void show_learning_path() {
        printf("🎯 추천 학습 순서\n")
        printf("=".repeat(50) + "\n\n")
        
        string[] learning_order = [
            "hello_world.pspp",
            "advanced_features.pspp", 
            "network_scan.pspp",
            "system_recon.pspp",
            "vulnerability_test.pspp",
            "web_application_test.pspp",
            "comprehensive_features.pspp",
            "security_toolkit.pspp",
            "practical_projects.pspp"
        ]
        
        for (int i = 0; i < learning_order.length; i++) {
            string filename = learning_order[i]
            dict<string, mixed> info = this.examples[filename]
            
            printf("단계 %d: %s\n", i + 1, info["title"])
            printf("  파일: %s\n", filename)
            printf("  난이도: %s\n", info["difficulty"])
            printf("  학습 목표: %s\n", info["description"])
            printf("\n")
        }
    }
    
    public void show_topic_index() {
        printf("📋 주제별 인덱스\n")
        printf("=".repeat(50) + "\n\n")
        
        # 모든 주제 수집
        dict<string, list<string>> topic_to_files = {}
        
        foreach (filename, info in this.examples) {
            string[] topics = info["topics"]
            foreach (topic in topics) {
                if (!topic_to_files.contains_key(topic)) {
                    topic_to_files[topic] = new list<string>()
                }
                topic_to_files[topic].push(filename)
            }
        }
        
        # 주제별로 파일 나열
        foreach (topic, files in topic_to_files) {
            printf("🔍 %s:\n", topic)
            foreach (file in files) {
                dict<string, mixed> info = this.examples[file]
                printf("  • %s (%s)\n", info["title"], file)
            }
            printf("\n")
        }
    }
    
    public void check_files() {
        printf("📁 예제 파일 상태 확인\n")
        printf("=".repeat(50) + "\n\n")
        
        int found_count = 0
        int total_count = this.examples.length
        
        foreach (filename, info in this.examples) {
            string filepath = sprintf("./%s", filename)
            bool exists = file_exists(filepath)
            
            printf("%s %s\n", exists ? "✅" : "❌", info["title"])
            printf("   파일: %s\n", filename)
            
            if (exists) {
                found_count++
                # 파일 크기 정보
                int size = file_get_size(filepath)
                printf("   크기: %d 바이트\n", size)
            } else {
                printf("   상태: 파일 없음\n")
            }
            printf("\n")
        }
        
        printf("총 %d개 예제 중 %d개 파일 존재 (%.1f%%)\n", 
               total_count, found_count, 
               (float)found_count / (float)total_count * 100.0)
    }
}

# ============================================================================
# 인터랙티브 메뉴 시스템
# ============================================================================

function void show_menu() {
    printf("\n" + "=".repeat(60) + "\n")
    printf("   PSP 언어 예제 학습 가이드\n")
    printf("=".repeat(60) + "\n")
    printf("1. 📖 예제 개요 보기\n")
    printf("2. 🎯 학습 순서 안내\n") 
    printf("3. 📋 주제별 인덱스\n")
    printf("4. 📁 파일 상태 확인\n")
    printf("5. 🚀 예제 실행 방법\n")
    printf("6. 💡 도움말\n")
    printf("0. 종료\n")
    printf("=".repeat(60) + "\n")
}

function void show_execution_guide() {
    printf("🚀 예제 실행 방법\n")
    printf("=".repeat(50) + "\n\n")
    
    printf("1. PSP 인터프리터 설치:\n")
    printf("   cd /Users/kazto/Desktop/PSP-Language\n")
    printf("   ./install.sh\n\n")
    
    printf("2. 예제 실행:\n")
    printf("   python3 src/psp_interpreter.py examples/hello_world.pspp\n\n")
    
    printf("3. 또는 직접 실행 (실행 권한 부여 후):\n")
    printf("   chmod +x examples/*.pspp\n")
    printf("   ./examples/hello_world.pspp\n\n")
    
    printf("4. VS Code에서 실행:\n")
    printf("   - VS Code 확장 설치 (vscode-extension 폴더)\n")
    printf("   - .pspp 파일 열기\n")
    printf("   - F5 키로 실행\n\n")
    
    printf("5. 대화형 모드:\n")
    printf("   python3 src/psp_interpreter.py\n")
    printf("   >>> print(\"Hello PSP!\")\n\n")
}

function void show_help() {
    printf("💡 PSP 언어 도움말\n")
    printf("=".repeat(50) + "\n\n")
    
    printf("📚 문서 위치:\n")
    printf("  - docs/complete_grammar.md   : 완전한 문법 가이드\n")
    printf("  - docs/api_reference.md      : API 레퍼런스\n")
    printf("  - docs/tutorial.md           : 튜토리얼\n")
    printf("  - docs/syntax.md             : 문법 요약\n")
    printf("  - README.md                  : 프로젝트 개요\n\n")
    
    printf("🔧 개발 도구:\n")
    printf("  - VS Code 확장 (구문 강조, 자동완성)\n")
    printf("  - 디버거 지원\n")
    printf("  - 린터 및 포매터\n\n")
    
    printf("🌐 온라인 리소스:\n")
    printf("  - GitHub: https://github.com/username/PSP-Language\n")
    printf("  - 문서: https://psp-language.readthedocs.io\n")
    printf("  - 커뮤니티: https://discord.gg/psp-language\n\n")
    
    printf("❓ 자주 묻는 질문:\n")
    printf("  Q: PSP는 Python과 어떻게 다른가요?\n")
    printf("  A: PSP는 보안/해킹 도구에 특화된 내장 함수를 제공합니다.\n\n")
    
    printf("  Q: 실제 운영 환경에서 사용할 수 있나요?\n")
    printf("  A: 교육 및 연구 목적으로 설계되었습니다.\n\n")
    
    printf("  Q: 다른 언어와 호환되나요?\n")
    printf("  A: Python 라이브러리와 호환되며 C/C++ 확장을 지원합니다.\n\n")
}

# ============================================================================
# 메인 실행
# ============================================================================

function void main() {
    ExampleGuide guide = new ExampleGuide()
    
    printf("PSP (PowerShellPlus) 언어 예제 가이드에 오신 것을 환영합니다!\n")
    printf("화이트햇 해킹과 보안 테스트를 위한 전문 프로그래밍 언어입니다.\n")
    
    while (true) {
        show_menu()
        printf("선택하세요 (0-6): ")
        
        # 사용자 입력 시뮬레이션 (실제로는 입력을 받아야 함)
        int choice = random_int(0, 6)  # 데모용 랜덤 선택
        printf("%d\n\n", choice)
        
        switch (choice) {
            case 1:
                guide.show_overview()
                break
            case 2:
                guide.show_learning_path()
                break
            case 3:
                guide.show_topic_index()
                break
            case 4:
                guide.check_files()
                break
            case 5:
                show_execution_guide()
                break
            case 6:
                show_help()
                break
            case 0:
                printf("PSP 예제 가이드를 종료합니다. 즐거운 학습 되세요! 🚀\n")
                return
            default:
                printf("올바른 번호를 선택해주세요 (0-6).\n")
                break
        }
        
        printf("\n계속하려면 아무 키나 누르세요...\n")
        sleep(2000)  # 2초 대기 (데모용)
        
        # 데모용으로 한 번만 실행 후 종료
        break
    }
}

# ============================================================================
# 추가 유틸리티 함수들
# ============================================================================

# 예제 파일 실행 함수
function bool run_example(string example_file) {
    string full_path = sprintf("./examples/%s", example_file)
    
    if (!file_exists(full_path)) {
        printf("예제 파일을 찾을 수 없습니다: %s\n", full_path)
        return false
    }
    
    printf("예제 실행 중: %s\n", example_file)
    printf("-".repeat(40) + "\n")
    
    try {
        # PSP 인터프리터로 실행 (시뮬레이션)
        string command = sprintf("python3 ../src/psp_interpreter.py %s", full_path)
        string result = execute_command(command)
        printf("%s\n", result)
        return true
    } catch (Exception ex) {
        printf("실행 오류: %s\n", ex.get_message())
        return false
    }
}

# 예제 파일 비교 함수
function void compare_examples(string file1, string file2) {
    printf("예제 파일 비교: %s vs %s\n", file1, file2)
    printf("-".repeat(40) + "\n")
    
    if (!file_exists(file1) || !file_exists(file2)) {
        printf("비교할 파일 중 하나가 존재하지 않습니다.\n")
        return
    }
    
    int size1 = file_get_size(file1)
    int size2 = file_get_size(file2)
    
    printf("크기: %s (%d 바이트) vs %s (%d 바이트)\n", file1, size1, file2, size2)
    
    string content1 = file_read(file1)
    string content2 = file_read(file2)
    
    int lines1 = content1.split("\n").length
    int lines2 = content2.split("\n").length
    
    printf("라인 수: %d vs %d\n", lines1, lines2)
    
    # 간단한 유사도 계산 (문자 단위)
    float similarity = calculate_similarity(content1, content2)
    printf("유사도: %.1f%%\n", similarity * 100)
}

# 문자열 유사도 계산 함수
function float calculate_similarity(string str1, string str2) {
    int len1 = str1.length
    int len2 = str2.length
    int max_len = len1 > len2 ? len1 : len2
    
    if (max_len == 0) return 1.0
    
    int common_chars = 0
    int min_len = len1 < len2 ? len1 : len2
    
    for (int i = 0; i < min_len; i++) {
        if (str1[i] == str2[i]) {
            common_chars++
        }
    }
    
    return (float)common_chars / (float)max_len
}

# 프로그램 실행
main()

print("\n📖 추가 정보:")
print("이 가이드는 PSP 언어의 모든 예제 파일을 체계적으로 학습할 수 있도록")
print("설계되었습니다. 각 예제는 독립적으로 실행 가능하며, 난이도에 따라")
print("순차적으로 학습하는 것을 권장합니다.")

print("\n🎯 학습 목표:")
print("1. PSP 언어의 기본 문법 마스터")
print("2. 보안 도구 개발 능력 향상") 
print("3. 실무에 적용 가능한 프로젝트 경험")
print("4. 윤리적 해킹 기술 습득")

print("\n⚠️  주의사항:")
print("모든 예제는 교육 목적으로만 사용하세요.")
print("실제 시스템에 대한 무단 테스트는 법적 문제가 될 수 있습니다.")
print("항상 적절한 권한을 받고 테스트를 수행하세요.")
